#include <stdio.h>
#include <string.h>
#include "XPLMDisplay.h"
#include "XPLMGraphics.h"
#include "XPLMProcessing.h"

static XPLMWindowID	gWindow = NULL;
static char gTempBuffer[256];
static float PreviousElapsedTimeSinceLastFlightLoop = 0;
//static float	TargetFrequency = 50.0f;
static float	TargetFrequency = 10.0f;
static float	TargetPeriod = 1.0f / TargetFrequency;

static void MyDrawWindowCallback(
								   XPLMWindowID		 inWindowID,	
								   void *			   inRefcon);	

static void MyHandleKeyCallback(
								   XPLMWindowID		 inWindowID,	
								   char				 inKey,	
								   XPLMKeyFlags		 inFlags,	
								   char				 inVirtualKey,	
								   void *			   inRefcon,	
								   int				  losingFocus);	

static int MyHandleMouseClickCallback(
								   XPLMWindowID		 inWindowID,	
								   int				  x,	
								   int				  y,	
								   XPLMMouseStatus	  inMouse,	
								   void *			   inRefcon);	

static float	MyFlightLoopCallback(
								   float				inElapsedSinceLastCall,	
								   float				inElapsedTimeSinceLastFlightLoop,	
								   int				  inCounter,	
								   void *			   inRefcon);	

PLUGIN_API int XPluginStart(
						char *		outName,
						char *		outSig,
						char *		outDesc)
{
	strcpy(outName, "HelloWorld2");
	strcpy(outSig, "xplanesdk.examples.helloworld2");
	strcpy(outDesc, "A plugin that makes an also window");

	gWindow = XPLMCreateWindow(
					50, 600, 400, 500,			/* Area of the window. */
					1,							/* Start visible. */
					MyDrawWindowCallback,		/* Callbacks */
					MyHandleKeyCallback,
					MyHandleMouseClickCallback,
					NULL);						/* Refcon - not used. */

	XPLMRegisterFlightLoopCallback(	
			MyFlightLoopCallback,	/* Callback */
			1.0,					/* Interval */
			NULL);					/* refcon not used. */

	return 1;
}

PLUGIN_API void	XPluginStop(void)
{
	XPLMUnregisterFlightLoopCallback(MyFlightLoopCallback, NULL);
	XPLMDestroyWindow(gWindow);
}

PLUGIN_API void XPluginDisable(void)
{
}

PLUGIN_API int XPluginEnable(void)
{
	return 1;
}

PLUGIN_API void XPluginReceiveMessage(
					XPLMPluginID	inFromWho,
					long			inMessage,
					void *			inParam)
{
}

void MyDrawWindowCallback(
								   XPLMWindowID		 inWindowID,	
								   void *			   inRefcon)
{
	int		left, top, right, bottom;
	float	color[] = { 1.0, 1.0, 1.0 };	 /* RGB White */
	
	XPLMGetWindowGeometry(inWindowID, &left, &top, &right, &bottom);
	XPLMDrawTranslucentDarkBox(left, top, right, bottom);
	XPLMDrawString(color, left + 5, top - 20, gTempBuffer, NULL, xplmFont_Basic);
}								  

void MyHandleKeyCallback(
								   XPLMWindowID		 inWindowID,	
								   char				 inKey,	
								   XPLMKeyFlags		 inFlags,	
								   char				 inVirtualKey,	
								   void *			   inRefcon,	
								   int				  losingFocus)
{
}								  

int MyHandleMouseClickCallback(
								   XPLMWindowID		 inWindowID,	
								   int				  x,	
								   int				  y,	
								   XPLMMouseStatus	  inMouse,	
								   void *			   inRefcon)
{
	return 1;
}									  

float	MyFlightLoopCallback(
								   float				inElapsedSinceLastCall,	
								   float				inElapsedTimeSinceLastFlightLoop,	
								   int				  inCounter,	
								   void *			   inRefcon)
{
	char Buffer[256];

	float ElapsedTimeDifference = (inElapsedTimeSinceLastFlightLoop - PreviousElapsedTimeSinceLastFlightLoop);
	if (ElapsedTimeDifference >= TargetPeriod)
	{
		float Frequency = (1.0f / ElapsedTimeDifference);
		sprintf(gTempBuffer, "Frequency = %f, Deviation = %f\n", Frequency, (TargetFrequency - Frequency));
		PreviousElapsedTimeSinceLastFlightLoop = inElapsedTimeSinceLastFlightLoop;
	}
	return -1;
}